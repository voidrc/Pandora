#!/bin/bash

# Define backup directory and file names
JSON="./path_list.json"
BACKUP_DIR="../Backup"
PACMAN_PACKAGES_FILE="$BACKUP_DIR/pacman_packages.txt"
AUR_PACKAGES_FILE="$BACKUP_DIR/aur_packages.txt"

echo "Starting backup process..."

# Create temporary backup directory
mkdir -p "$BACKUP_DIR" || { echo "Error: Could not create backup directory."; exit 1; }

mkdir -p "$BACKUP_DIR/.config"
mkdir -p "$BACKUP_DIR/.local/share"

# 1. Export installed packages
echo "Exporting installed Pacman packages..."
pacman -Qqen > "$PACMAN_PACKAGES_FILE" || { echo "Error: Could not export Pacman packages."; rm -rf "$BACKUP_DIR"; exit 1; }
echo "Exporting installed AUR packages (via yay)..."
yay -Qqem > "$AUR_PACKAGES_FILE" || { echo "Error: Could not export AUR packages. Make sure yay is installed."; rm -rf "$BACKUP_DIR"; exit 1; }

# 2. Copy .config and .local/share
echo "Copying ~/.config to backup directory..."
mapfile -t CON_PATH < <(jq -r '.config[]' "$JSON")
for p in "${CON_PATH[@]}"; do
  p=$(eval echo "$p")
  if [[ -d "$p" || -f "$p" ]]; then
    safe_name="${p#$HOME/.config/}"
    target="$BACKUP_DIR/.config/$safe_name"
    mkdir -p "$target"
    echo ">>> syncing $p → $target"
    rsync -avhL --delete "$p" "$target/"
  else
    echo "!!! $p missing, skipping"
  fi
done
echo "Copying ~/.local/share to backup directory..."
mapfile -t LOC_PATH < <(jq -r '.local[]' "$JSON")
for p in "${LOC_PATH[@]}"; do
  p=$(eval echo "$p")
  if [[ -d "$p" || -f "$p" ]]; then
    safe_name="${p#$HOME/.local/share/}"
    target="$BACKUP_DIR/.local/share/$safe_name"
    mkdir -p "$target"
    echo ">>> syncing $p → $target"
    rsync -avhL --delete "$p" "$target/"
    else
      echo "!!! $p missing, skipping"
    fi
done

echo "Backup complete! Archive saved to: $BACKUP_ARCHIVE"
