#!/usr/bin/env bash

# Exit on error and trace errors
set -eo pipefail

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Enhanced logging functions
info() { echo -e "${CYAN}[â„¹] $1${NC}"; }
success() { echo -e "${GREEN}[âœ“] $1${NC}"; }
warning() { echo -e "${YELLOW}[âš ] $1${NC}"; }
error() { echo -e "${RED}[âœ—] $1${NC}" >&2; }

# Package categories
declare -A PACKAGE_CATEGORIES=(
    ["Editors"]="cursor-bin vim ranger ghostwriter obsidian"
    ["VM"]="docker-desktop virtualbox"
    ["Communication"]="vesktop telegram-desktop"
    ["Gaming"]="xmcl-launcher cachyos-gaming-meta cachyos-gaming-applications"
    ["Media"]="mpv mpv-mpris mpvpaper yt-dlp cava"
    ["Editing"]="obs-studio-browser davinci-resolve"
    ["Utilities"]="konsole evince fzf ripgrep ripgrep-all gnu-netcat multitail libva-nvidia-driver"
    ["RogLaptop"]="power-profiles-daemon asusctl supergfxctl rog-control-center"
)

# Services to enable & start
SERVICES=(
    "supergfxd"
    "power-profiles-daemon"
    "asusd"
)

# Install packages in queued batches (official first, then AUR)
function install_packages() {
    local all_packages=()
    local pacman_queue=()
    local aur_queue=()
    local failed_packages=()
    local failed_official=()
    local failed_aur=()
    local installed_count=0
    local skipped_count=0
    local already_installed=()
    local installed_now=()

    # Gather all packages (flatten categories)
    for category in "${!PACKAGE_CATEGORIES[@]}"; do
        for pkg in ${PACKAGE_CATEGORIES[$category]}; do
            [[ -z "$pkg" ]] && continue
            all_packages+=("$pkg")
        done
    done

    # Count already installed beforehand (both repo and AUR)
    for pkg in "${all_packages[@]}"; do
        if pacman -Qi "$pkg" &>/dev/null; then
            ((skipped_count++))
            already_installed+=("$pkg")
        fi
    done

    info "Updating package databases..."
    sudo pacman -Sy --noconfirm || {
        error "Failed to update package databases"
        return 1
    }

    # Split into official repo vs AUR queues
    for pkg in "${all_packages[@]}"; do
        if pacman -Si "$pkg" &>/dev/null; then
            # Determine which repository provides this package
            local repo
            repo=$(pacman -Si "$pkg" 2>/dev/null | awk -F': *' '/^Repository/{print tolower($2); exit}')
            # If provided by chaotic-aur, prefer installing via yay to avoid fetch/signature issues
            if [[ "$repo" == "chaotic-aur" ]]; then
                aur_queue+=("$pkg")
            else
                pacman_queue+=("$pkg")
            fi
        else
            aur_queue+=("$pkg")
        fi
    done

    # Log queued packages
    if ((${#pacman_queue[@]} > 0)); then
        echo -e "${CYAN}Queued (official):${NC} ${YELLOW}${#pacman_queue[@]}${NC}"
        echo -e "  ${BLUE}- ${NC}${pacman_queue[*]}"
    fi
    if ((${#aur_queue[@]} > 0)); then
        echo -e "${CYAN}Queued (AUR):${NC} ${YELLOW}${#aur_queue[@]}${NC}"
        echo -e "  ${BLUE}- ${NC}${aur_queue[*]}"
    fi
    if ((${#already_installed[@]} > 0)); then
        echo -e "${CYAN}Already installed:${NC} ${YELLOW}${#already_installed[@]}${NC}"
        echo -e "  ${GREEN}- ${NC}${already_installed[*]}"
    fi

    # Batch install official repo packages
    if ((${#pacman_queue[@]} > 0)); then
        echo -e "\n${BLUE}â–¸ ${NC}Installing official packages: ${CYAN}${#pacman_queue[@]} queued${NC}"
        if sudo pacman -S --noconfirm --needed "${pacman_queue[@]}" &>/dev/null; then
            :
        else
            warning "Some official packages may have failed"
        fi
        # Retry any pacman-queued packages that remain uninstalled via yay (fallback)
        local retry_via_yay=()
        for pkg in "${pacman_queue[@]}"; do
            if ! pacman -Qi "$pkg" &>/dev/null; then
                retry_via_yay+=("$pkg")
            fi
        done
        if ((${#retry_via_yay[@]} > 0)); then
            echo -e "${YELLOW}â†» Retrying ${#retry_via_yay[@]} package(s) via AUR helper${NC}"
            yay -S --noconfirm --needed --cleanafter "${retry_via_yay[@]}" &>/dev/null || true
        fi
    fi

    # Batch install AUR packages
    if ((${#aur_queue[@]} > 0)); then
        echo -e "\n${BLUE}â–¸ ${NC}Installing AUR packages: ${CYAN}${#aur_queue[@]} queued${NC}"
        if yay -S --noconfirm --needed --cleanafter "${aur_queue[@]}" &>/dev/null; then
            :
        else
            warning "Some AUR packages may have failed"
        fi
    fi

    # Post-install verification to compute installed and failed
    for pkg in "${all_packages[@]}"; do
        if pacman -Qi "$pkg" &>/dev/null; then
            # If it wasn't originally installed, count as installed now
            local was_installed_before=false
            for ai in "${already_installed[@]}"; do
                if [[ "$ai" == "$pkg" ]]; then
                    was_installed_before=true
                    break
                fi
            done
            if ! $was_installed_before; then
                ((installed_count++))
                installed_now+=("$pkg")
            fi
        else
            if pacman -Si "$pkg" &>/dev/null; then
                failed_packages+=("$pkg (official)")
                failed_official+=("$pkg")
            else
                failed_packages+=("$pkg (AUR)")
                failed_aur+=("$pkg")
            fi
        fi
    done

    # Adjust installed_count to exclude those that were already installed
    if ((installed_count > skipped_count)); then
        installed_count=$((installed_count - skipped_count))
    else
        installed_count=0
    fi

    # Summary
    echo -e "\n${CYAN}Installation Summary:${NC}"
    echo -e "â€¢ ${GREEN}Installed now: $installed_count packages${NC}"
    if ((${#installed_now[@]} > 0)); then
        echo -e "  ${GREEN}- ${NC}${installed_now[*]}"
    fi
    echo -e "â€¢ ${YELLOW}Skipped: $skipped_count already installed${NC}"
    if ((${#already_installed[@]} > 0)); then
        echo -e "  ${YELLOW}- ${NC}${already_installed[*]}"
    fi

    if [ ${#failed_packages[@]} -gt 0 ]; then
        echo -e "â€¢ ${RED}Failed: ${#failed_packages[@]} packages${NC}"
        if ((${#failed_official[@]} > 0)); then
            echo -e "  ${RED}official:${NC} ${failed_official[*]}"
        fi
        if ((${#failed_aur[@]} > 0)); then
            echo -e "  ${RED}aur:${NC} ${failed_aur[*]}"
        fi
        return ${#failed_packages[@]}
    fi

    return 0
}

# Enable and start services with status tracking
function activate_services() {
    local enabled_count=0
    local failed_services=()
    
    # Reload systemd to detect new services
    sudo systemctl daemon-reload

    for svc in "${SERVICES[@]}"; do
        printf "\n${BLUE}â–¸ ${NC}Configuring service: ${CYAN}%-25s${NC}" "$svc"
        
        # Check if service file exists rather than unit status
        if [[ ! -f "/usr/lib/systemd/system/${svc}.service" ]]; then
            echo -e " ${RED}âœ– Service file not found${NC}"
            failed_services+=("$svc (file missing)")
            continue
        fi
        
        # Enable service
        if sudo systemctl enable "$svc" &>/dev/null; then
            echo -ne " ${GREEN}âœ” Enabled${NC}"
        else
            echo -ne " ${RED}âœ– Enable failed${NC}"
            failed_services+=("$svc (enable failed)")
            continue
        fi
        
        # Start service
        if sudo systemctl start "$svc" &>/dev/null; then
            echo -e " ${GREEN}âœ“ Started${NC}"
            ((enabled_count++))
        else
            echo -e " ${RED}âœ– Start failed${NC}"
            failed_services+=("$svc (start failed)")
        fi
    done

    # Summary
    echo -e "\n${CYAN}Services Summary:${NC}"
    echo -e "â€¢ ${GREEN}Activated: $enabled_count services${NC}"
    
    if [ ${#failed_services[@]} -gt 0 ]; then
        echo -e "â€¢ ${RED}Failed: ${#failed_services[@]} services${NC}"
        for failed in "${failed_services[@]}"; do
            echo -e "  - $failed"
        done
    fi
    
    return ${#failed_services[@]}
}

function verify_services() {
    echo -e "\n${CYAN}Verifying Services:${NC}"
    for svc in "${SERVICES[@]}"; do
        if systemctl is-active --quiet "$svc"; then
            echo -e "${GREEN}âœ“ $svc is running${NC}"
        else
            echo -e "${YELLOW}âš  $svc is not running${NC}"
        fi
    done
}

# Main execution flow
main() {
    echo -e "\n${YELLOW}ðŸ“¦ Starting Package Installation Process${NC}"
    echo -e "--------------------------------------------"
    
    # Check and install dependencies
    info "Checking system dependencies..."
    blackarch
    
    # Install packages
    info "Installing packages..."
    if ! install_packages; then
        warning "Some packages failed to install"
    fi
    
    # Activate services
    info "Configuring system services..."
    if ! activate_services; then
        warning "Some services failed to activate"
    fi
    
    # Verify Services
    info "Verifying Services..."
    if ! verify_services; then
        warning "Failed to Verify"
    fi

    # Final success message
    echo -e "\n${GREEN}âœ… Package Installation Complete!${NC}"
}

# Execute main function
main
